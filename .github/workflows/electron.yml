name: Build and release electron

on: workflow_dispatch

jobs:
  create-release:
    name: Create release
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.package_version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Check out Git repository
        uses: actions/checkout@main
        with:
          token: ${{ secrets.TANATLOC_SSR_AS_SUBMODULE }}
          submodules: true

      - name: Submodule update
        run: |
          git submodule update --remote
          git config --global user.name 'Github Actions bot'
          git config --global user.email 'bot@tanatloc.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git commit -am "Auto updated submodule" --allow-empty && git push

      - name: Version
        id: package_version
        run: |
          VERSION=`cat tanatloc/package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[",]//g' | tr -d '[[:space:]]'`
          echo "::set-output name=version::$VERSION"

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package_version.outputs.version }}
          release_name: v${{ steps.package_version.outputs.version }}
          body: |
            Electron build for:
            - Linux (AppImage)
            - MacOS (dmg). For now there is no Apple validation, you will have a warning when you will launch the program
            - Windows (exe)
            The electron contains only the "Local" Tanatloc plugin
          draft: false
          prerelease: false

  get-release:
    needs: create-release
    if: always() && (needs.create-release.result == 'failure')
    name: Get release
    runs-on: ubuntu-latest

    outputs:
      upload_url: ${{ steps.get_release.outputs.upload_url }}
    steps:
      - name: Install
        run: sudo apt install -y jq

      - name: Check out Git repository
        uses: actions/checkout@main
        with:
          token: ${{ secrets.TANATLOC_SSR_AS_SUBMODULE }}
          submodules: true

      - name: Version
        id: package_version
        run: |
          VERSION=`cat tanatloc/package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[",]//g' | tr -d '[[:space:]]'`
          echo "::set-output name=version::$VERSION"

      - name: Get release
        id: get_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: v${{ steps.package_version.outputs.version }}
        run: |
          UPLOAD_URL=`curl -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${GH_TOKEN}" https://api.github.com/repos/Airthium/tanatloc-electron/releases/tags/${TAG} | jq .upload_url`
          echo "::set-output name=upload_url::$UPLOAD_URL"

  release-ubuntu:
    needs: [create-release, get-release]
    if: always()
    name: Build and release (Ubuntu)
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@main
        with:
          token: ${{ secrets.TANATLOC_SSR_AS_SUBMODULE }}
          submodules: true

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@main
        with:
          node-version: 16

      - uses: webfactory/ssh-agent@master
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Install
        run: yarn install
        env:
          YARN_CHECKSUM_BEHAVIOR: update

      - name: Electron build
        run: yarn run prebuild && yarn run build
        env:
          BUILD_VERSION: ${{ needs.create-release.outputs.version }}

      - name: Upload release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url || needs.get-release.outputs.upload_url }}
          asset_path: ./dist/Tanatloc-${{ needs.create-release.outputs.version }}.AppImage
          asset_name: Tanatloc-${{ needs.create-release.outputs.version }}.AppImage
          asset_content_type: application/octet-stream

  release-macos:
    needs: [create-release, get-release]
    if: always()
    name: Build and release (MacOS)
    runs-on: macos-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@main
        with:
          token: ${{ secrets.TANATLOC_SSR_AS_SUBMODULE }}
          submodules: true

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@main
        with:
          node-version: 16

      - uses: webfactory/ssh-agent@master
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Install
        run: yarn install
        env:
          YARN_CHECKSUM_BEHAVIOR: update

      - name: Electron build
        run: yarn run prebuild && yarn run build
        env:
          BUILD_VERSION: ${{ needs.create-release.outputs.version }}

      - name: Upload release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url || needs.get-release.outputs.upload_url }}
          asset_path: ./dist/Tanatloc-${{ needs.create-release.outputs.version }}.dmg
          asset_name: Tanatloc-${{ needs.create-release.outputs.version }}.dmg
          asset_content_type: application/octet-stream

  release-windows:
    needs: [create-release, get-release]
    if: always()
    name: Build and release (Windows)
    runs-on: windows-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@main
        with:
          token: ${{ secrets.TANATLOC_SSR_AS_SUBMODULE }}
          submodules: true

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@main
        with:
          node-version: 16

      - uses: webfactory/ssh-agent@master
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Install
        run: yarn install
        env:
          YARN_CHECKSUM_BEHAVIOR: update

      - name: Electron build
        run: yarn run prebuild && yarn run build
        env:
          BUILD_VERSION: ${{ needs.create-release.outputs.version }}

      - name: Upload release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url || needs.get-release.outputs.upload_url }}
          asset_path: './dist/Tanatloc.Setup.${{ needs.create-release.outputs.version }}.exe'
          asset_name: 'Tanatloc.Setup.${{ needs.create-release.outputs.version }}.exe'
          asset_content_type: application/octet-stream
